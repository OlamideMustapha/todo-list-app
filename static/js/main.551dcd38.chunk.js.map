{"version":3,"sources":["components/main.js","components/header.js","App.js","reportWebVitals.js","index.js"],"names":["TaskSortComponent","props","className","onClick","viewAllTask","viewActiveTasks","viewCompletedTasks","TaskControlComponent","value","clearCompleted","EmptyList","TaskList","view","tasks","task","draggable","onDragStart","dragStarted","onDragOver","draggingOver","onDrop","dropped","id","done","toggleTaskStatus","content","removeTask","list","t","map","length","filter","Main","themeToggleBtn","darkMode","toggleTheme","taskInput","createTask","type","onChange","onChangeInput","inputText","placeholder","Header","App","state","dragSource","bind","retrieveState","storeState","generateID","window","localStorage","this","setState","JSON","parse","getItem","setItem","stringify","event","app","document","querySelector","classList","remove","add","target","parentNode","childNodes","forEach","child","toggleActiveState","randomID","i","x","Math","floor","random","concat","String","fromCharCode","idExist","find","taskId","taskContent","index","findIndex","updatedTasks","stopPropagation","dataTransfer","setData","effectAllowed","preventDefault","dropEffect","currentId","getData","y","z","focus","addEventListener","key","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.551dcd38.chunk.js","sourcesContent":["import '../styles/css/App.css';\n\n\nconst TaskSortComponent = (props) => {\n  return (\n    <div className= {`main__sortList ${props.className}`}>\n\n      <ul>\n        <li className=\"active\" onClick={props.viewAllTask}>All</li>\n        <li onClick={props.viewActiveTasks}>Active</li>\n        <li onClick={props.viewCompletedTasks}>Completed</li>\n      </ul>\n    \n    </div>\n  );\n}\n\n\n\nconst TaskControlComponent = (props) => {\n  const value = props.value > 1 \n        ? `${props.value} items left`\n        : `${props.value} item left`;\n\n  return (\n    <div className=\"main__task-controls\">\n      <div className=\"main__task-items-left\">\n        {value}\n      </div>\n\n    <TaskSortComponent\n      className={\"hide-mobile\"}\n      viewAllTask={props.viewAllTask}\n      viewActiveTasks={props.viewActiveTasks}\n      viewCompletedTasks={props.viewCompletedTasks} />\n\n      <button\n        className=\"main__task-clear-completed--btn btn\"\n        onClick={props.clearCompleted}>\n        Clear Completed\n      </button>\n    </div>\n  );\n}\n\n\n\n\n\nconst EmptyList = (props) => <div className=\"main__task-empty\">{props.value}</div>;\n\nconst TaskList = (props) => {\n  const view = props.view;\n  const tasks = props.tasks;\n\n\n  /* adds a css class to tasks that are completed before rendering */\n  const task = task =>\n    <div\n      draggable=\"true\"\n      onDragStart={props.dragStarted}\n      onDragOver={props.draggingOver}\n      onDrop={props.dropped}\n      id={task.id} \n      key={task.id}\n      \n      className={`main__task-item ${task.done ? \"done\" : \"\"}`}>\n\n      <button\n        className=\"main__task-btn btn\" \n        onClick={props.toggleTaskStatus}>\n      </button>\n      <h3\n        className=\"main__task-title done\"\n        >{task.content}</h3>\n\n      <button\n        className=\"main__task-delete-btn btn\"\n        onClick={props.removeTask}>\n      \n      </button>\n    </div>\n\n  let list = [];\n\n  if (view === \"all\") {\n    \n    const t = tasks.map (task);\n    list = t.length === 0 ? <EmptyList value=\"Empty List\" /> : t;\n  } else if (view === \"active\") {\n\n    const t = tasks.filter (task => task.done === false).map (task);\n    list = t.length === 0 ? <EmptyList value=\"No active task\" /> : t;\n  } else {\n    \n    const t = tasks.filter (task => task.done === true).map (task);\n    list = t.length === 0 ? <EmptyList value=\"No completed task\" /> : t;\n  }\n\n  return (\n    <section className=\"main__task\">\n\n      { list }\n\n      <TaskControlComponent\n        viewAllTask={props.viewAllTask}\n        viewActiveTasks={props.viewActiveTasks}\n        viewCompletedTasks={props.viewCompletedTasks}\n        value={tasks.filter (t => t.done === false).length}\n        clearCompleted={props.clearCompleted}/>\n    </section>\n  )\n}\n\nconst Main = (props) => {\n\n  const themeToggleBtn = <button className= {`main__btn btn ${props.darkMode ? \"dark\" : \"light\"}`} onClick={props.toggleTheme}> </button>;\n\n  const taskInput = \n    <div className=\"main__input\">\n      <button \n        className=\"main__input-btn btn\"\n        onClick={props.createTask}>\n      </button>\n      \n      <label className=\"main__input-label\">\n        <input\n          className=\"main__input-component\"\n          type=\"text\"\n          onChange={props.onChangeInput}\n          value={props.inputText}\n          placeholder={\"Create a new todo...\"}/>\n      </label>\n    </div>\n  \n  \n  return (\n    <main className=\"main  container\">\n\n      {/* The header section */}\n      <section className=\"main__header\">\n        <div className=\"main__title-toggle--wrapper\">\n\n          <h1 className=\"main__title\">\n            ToDo\n          </h1>\n\n          { themeToggleBtn }\n\n        </div>\n\n        <div>\n\n          { taskInput }\n\n        </div>\n      </section>\n      {/* Section End */}\n\n\n      {/* Task list Section */}\n      <TaskList\n        view={props.view}\n        tasks={props.tasks}\n        viewAllTask={props.viewAllTask}\n        viewActiveTasks={props.viewActiveTasks}\n        viewCompletedTasks={props.viewCompletedTasks}\n        toggleTaskStatus={props.toggleTaskStatus}\n        removeTask={props.removeTask}\n        clearCompleted={props.clearCompleted}\n        draggingOver={props.draggingOver}\n        dragStarted={props.dragStarted}\n        dropped={props.dropped}/>\n      {/* Section end */}\n\n\n      <TaskSortComponent\n        className={\"hide-desktop\"}\n        viewAllTask={props.viewAllTask}\n        viewActiveTasks={props.viewActiveTasks}\n        viewCompletedTasks={props.viewCompletedTasks} />\n\n\n      <div className=\"main__instruction\">Drag and drop to reorder list</div>\n    </main>\n  )\n}\n\nexport default Main;","import '../styles/css/App.css';\n\nconst Header = () => {\n  return (\n    <header className=\"header\">\n      <div className=\"header__background\"></div>\n    </header>\n  )\n}\n\n\nexport default Header","import React, { Component } from \"react\";\nimport './styles/css/App.css';\n\nimport Main from \"./components/main.js\";\nimport Header from \"./components/header.js\";\n\n\n\n\nclass App extends Component {\n  constructor () {\n    super ();\n\n    this.state = {\n      inputText: \"\",\n      darkMode: false,\n      dragSource: \"\",\n      tasks: [\n        {id: \"item1\", content: \"Complete online JavaScript course\", done: true },\n        {id: \"item2\", content: \"Jog around the park 3x\", done: false },\n        {id: \"item3\", content: \"10 minutes meditation\", done: false },\n        {id: \"item4\", content: \"Read for 1 hour\", done: false },\n        {id: \"item5\", content: \"Pick up groceries\", done: false },\n        {id: \"item6\", content: \"Complete Todo App on Frontent Mentor\", done: false },\n      ], \n      view: \"all\"\n    };\n\n    this.toggleTheme        = this.toggleTheme.bind (this);\n    this.onChangeInput      = this.onChangeInput.bind (this);\n    this.viewAllTask        = this.viewAllTask.bind (this);\n    this.viewActiveTasks    = this.viewActiveTasks.bind (this);\n    this.viewCompletedTasks = this.viewCompletedTasks.bind (this);\n    this.clearCompleted     = this.clearCompleted.bind (this);\n    this.createTask         = this.createTask.bind (this);\n    this.toggleTaskStatus   = this.toggleTaskStatus.bind (this);\n    this.removeTask         = this.removeTask.bind (this)\n    this.draggingOver       = this.draggingOver.bind (this);\n    this.dragStarted        = this.dragStarted.bind (this);\n    this.dropped            = this.dropped.bind (this);\n    this.retrieveState      = this.retrieveState.bind (this);\n    this.storeState         = this.storeState.bind (this);\n    this.generateID         = this.generateID.bind (this);\n\n  }\n\n\n  /* app's states are store in the local storage */\n\n  retrieveState () {\n    if (window.localStorage[\"LCGFZZHHMURKBVDWZ__TODO-APP\"])\n      this.setState ({ ...JSON.parse (window.localStorage.getItem (\"LCGFZZHHMURKBVDWZ__TODO-APP\")) });\n\n  }\n\n  storeState () {\n    /* Storing state */\n    window.localStorage.setItem (\"LCGFZZHHMURKBVDWZ__TODO-APP\", JSON.stringify (this.state));\n  }\n\n  /* handles toggle theme button */\n  toggleTheme (event) {\n    const app = document.querySelector (\"#app\");\n\n    if (this.state.darkMode) {\n\n      /* if dark mode is on */\n      app.classList.remove (\"dark\");\n      app.classList.add (\"light\");\n    } else {\n\n      /* if light mode is on */\n      app.classList.remove (\"light\");\n      app.classList.add (\"dark\");\n    }\n    \n    /* Update app's state */\n    this.setState (({darkMode}) => ({ darkMode: !darkMode }));\n  }\n\n\n  /* Handles input component change event */\n  onChangeInput (event) {\n    this.setState (({inputText}) => {\n\n    return {inputText: event.target.value }\n    });\n  }\n\n  toggleActiveState (event) {\n    event.target.parentNode.childNodes\n      .forEach (child => child.classList.remove (\"active\"))\n    event.target.classList.add (\"active\")\n  }\n\n\n  /* Update app's state to show all tasks */\n  viewAllTask (event) {\n    this.toggleActiveState (event);\n\n    this.setState ({view: \"all\"});\n  }\n\n\n  /* Update app's state to show only active tasks */\n  viewActiveTasks (event) {\n    this.toggleActiveState (event);\n\n    this.setState ({view: \"active\"});\n  }\n\n\n  /* Update app's state to show completed tasks */\n  viewCompletedTasks (event) {\n    this.toggleActiveState (event);\n\n    this.setState ({view: \"completed\"});\n  }\n\n\n  /**\n   * Generate a random unique ID for each new task\n   */\n  generateID () {\n    const randomID = () => {\n\n      let value = \"\";\n      for (let i = 0; i <= 10 ; i++) {\n        let x = Math.floor (Math.random () * (90 - 65 + 1)) + 65;\n        value = value.concat (String.fromCharCode (x));\n      }\n      return value\n    }\n\n    let id = randomID ();\n    let idExist = this.state.tasks.find (task => task.id === id);\n    while (idExist)\n      id = randomID ();\n  \n\n    return id;\n  }\n\n\n  /**\n   * creat a new task object\n   */\n  createTask () {\n\n    /* Create a task ID */\n    const taskId = this.generateID ();\n\n    this.setState (({tasks, inputText}) => {\n\n      /* Set empty task content to display \"Empty task\" */\n      const taskContent = inputText === \"\"\n                        ? \"Empty task\"\n                        : inputText;\n\n      /* Update tasks */\n      const updatedTasks = tasks\n        .concat ({id: taskId\n                , content: taskContent\n                , done: false});\n\n      /* Set state */\n      return { tasks: updatedTasks , inputText: \"\"};\n    });\n  }\n\n\n  /**\n   * Toggles the state of a task, set the task.done attribute\n   * to true or false\n   */\n  toggleTaskStatus (event) {\n\n    /* find index of task */\n    const index = this.state.tasks.findIndex (task =>\n      task.id === event.target.parentNode.id);\n\n    const task = this.state.tasks[index];\n\n    this.setState (state => {\n\n      /* update task object */\n      state.tasks[index] = { ...task, done: !task.done};\n\n      /* adds a css class to the parent element */\n      state.tasks[index].done\n        ? event.target.parentNode.classList.add (\"done\")\n        : event.target.parentNode.classList.remove (\"done\");\n\n      /* update state */\n      return {tasks: state.tasks};\n    });\n\n  }\n\n\n  /* removes a task */\n  removeTask (event) {\n    /* removes task with id attribute */\n    const updatedTasks = this.state.tasks.filter (task =>\n      task.id !== event.target.parentNode.id);\n\n    /* update state */\n    this.setState ({tasks: updatedTasks});\n  }\n\n\n  /* clear all completed tasks */\n  clearCompleted () {\n    /* removes tasks that have been completed */\n    const updatedTasks = this.state.tasks.filter (task =>\n      !task.done);\n\n    /* update state */\n    this.setState ({tasks: updatedTasks});\n  }\n\n\n  /**\n   * Drag and drop implementation\n   * this implementation simply looks to swapping the position of\n   * the drag task and drop task in this.state.task, causing react to\n   * update the element nodes\n   */\n  dragStarted (event) {\n    //start drag\n    event.stopPropagation ();\n\n    //set data\n    event.dataTransfer.setData (\"id\", event.target.id);\n    // //specify allowed transfer\n    event.dataTransfer.effectAllowed = \"move\";\n  }\n  \n  draggingOver (event) {\n    //drag over\n    event.preventDefault();\n    event.stopPropagation();\n    \n    event.dataTransfer.dropEffect = \"move\";\n  }\n  \n\n  dropped (event) {\n    //drop\n    event.stopPropagation();\n    event.preventDefault();\n\n    let currentId;\n    let id = event.dataTransfer.getData (\"id\");\n\n    // makes sure the drop event occurs on the parent div\n    if (!event.target.id)\n      currentId = event.target.parentNode.id;\n    else currentId = event.target.id;\n\n    // find index of tasks to swap\n    let i = this.state.tasks.findIndex (t => t.id === currentId);\n    let y = this.state.tasks.findIndex (t => t.id === id);\n\n    const x = this.state.tasks[i];\n    const z = this.state.tasks[y];\n\n    \n    this.setState (state => {\n      // swap task data\n      state.tasks[i] = z;\n      state.tasks[y] = x;\n\n      // update date\n      return {tasks: state.tasks}\n    });\n  }\n  \n  \n  render () {\n\n    return (\n      <div id=\"app\" className={this.state.darkMode ? \"dark\" : \"light\"}>\n        <Header />\n\n        <Main \n          darkMode={this.state.darkMode}\n          toggleTheme={this.toggleTheme}\n          onChangeInput={this.onChangeInput}\n          inputText={this.state.inputText}\n          tasks={this.state.tasks}\n          view={this.state.view}\n          viewAllTask={this.viewAllTask}\n          viewActiveTasks={this.viewActiveTasks}\n          viewCompletedTasks={this.viewCompletedTasks}\n          clearCompleted={this.clearCompleted}\n          createTask={this.createTask}\n          toggleTaskStatus={this.toggleTaskStatus}\n          removeTask={this.removeTask}\n          draggingOver={this.draggingOver}\n          dragStarted={this.dragStarted}\n          dropped={this.dropped} />\n\n      </div>\n    );\n  }\n\n\n  componentDidMount () {\n    \n    this.retrieveState ();\n\n    const taskInput = document.querySelector (\".main__input-component\");\n    /* Set focus on input component */\n    taskInput.focus ();\n\n    /* create tasks by pressing enter button */\n    taskInput.addEventListener (\"keypress\", (event) => {\n     if (event.key === \"Enter\") {\n       this.createTask ();\n\n       /* Update input element to show an empty string */\n       this.setState ({inputText: \"\"});\n     }  \n   });\n  }\n\n  componentDidUpdate () {\n    this.storeState ();\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/css/App.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}